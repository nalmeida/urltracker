#!/bin/bash

VERSION="v2.0.0"

# Colors
RESET="\033[0m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
RED="\033[0;31m"
BLUE="\033[0;34m"
CYAN="\033[0;36m"

# Override default user agent User-Agent: curl/7.54.1
OVERRIDE_USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"

# Override default max timetout for curl requests (2min) to 10s
OVERRIDE_MAX_TIMEOUT="10"

# Default HTTP method
DEFAULT_METHOD="GET"

# Function to get color for a status code - compatible with older Bash
get_status_color() {
    local status=$1
    
    # Check if specific status code has specific color (using case instead of associative array)
    case "$status" in
        # Success codes - green
        200|201|202|203|204|205|206)
            echo "$GREEN"
            ;;
        # Redirect codes - yellow
        300|301|302|303|304|307|308)
            echo "$YELLOW"
            ;;
        # Client error codes - red
        400|401|403|404|405|429)
            echo "$RED"
            ;;
        # Server error codes - red
        500|501|502|503|504)
            echo "$RED"
            ;;
        # Default coloring by status category
        *)
            # Extract first digit of status code
            local first_digit="${status:0:1}"
            case "$first_digit" in
                2) echo "$GREEN" ;;
                3) echo "$YELLOW" ;;
                4|5) echo "$RED" ;;
                *) echo "$RESET" ;;
            esac
            ;;
    esac
}

# Version function
show_version() {
  echo "$(basename "$0") $VERSION"
}

# Help function
show_help() {
    echo -e "${YELLOW}[${RESET} urltracker $VERSION ${YELLOW}]${RESET} ${YELLOW}â€¢${RESET}\033[0;90m @nalmeida\033[0m"
    echo ""
    echo "Usage: $0 [options] [URL]"
    echo ""
    echo "Options:"
    echo "  -h, --help           Display this help message"
    echo "  -V, --version        Display the version"
    echo "  -l, --list <file>    Process a list of URLs from a text file"
    echo "  -o, --output <file>  Export results to a CSV file"
    echo "  -v, --verbose        Verbose mode: show all redirect URLs"
    echo "  -q, --quiet          Quiet mode: no output to console"
    echo "  -nc, --no-color      Disable colored output"
    echo "  -m, --method <method> HTTP method to use (default: GET. HEAD is faster but some servers may block it)"
    echo "  -a, --auth <user:password>   Use HTTP Basic Authentication"
    echo "  -H, --header <header>        Add custom header (can be used multiple times)"
    echo "  -c, --cookie <name=value>    Add a cookie (can be used multiple times)"
    echo ""
    echo "Examples:"
    echo "  $0 https://example.com"
    echo "  $0 --list urls.txt"
    echo "  $0 --list urls.txt --output results.csv"
    echo "  $0 --verbose https://example.com"
    echo "  $0 --method HEAD --verbose https://example.com"
    echo "  $0 --auth username:password https://example.com"
    echo "  $0 --header \"User-Agent: Mozilla/5.0\" https://example.com"
    echo "  $0 --cookie \"session=abc123\" https://example.com"
    echo "  $0 --quiet --list urls.txt --output results.csv"
    echo ""
    echo "Note: For URLs with special characters (?, &, etc.), enclose the URL in quotes:"
    echo "  $0 \"https://example.com/page?param=value&other=data\""
    echo ""
    echo "The script displays information in the format:"
    echo "  <ORIGINAL_URL> [STATUS_CODES_LIST] <FINAL_URL>"
    echo ""
    echo "When exporting to CSV, the following columns are included:"
    echo "  Origin,StatusCode,EffectiveUrl"
    echo ""
    echo "Supported HTTP methods:"
    echo "  GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH, TRACE"
    echo ""
    echo "Color coding:"
    echo -e "  ${GREEN}Green${RESET}:  Success status codes (2xx)"
    echo -e "  ${YELLOW}Yellow${RESET}: Redirect status codes (3xx)"
    echo -e "  ${RED}Red${RESET}:    Error status codes (4xx, 5xx)"
    echo -e "  ${BLUE}Blue${RESET}:   Final destination URL"
    exit 0
}

# Function to build curl command safely
build_curl_command() {
    local base_cmd="$1"
    local url="$2"
    local method="$3"
    
    # Start with base curl options
    local cmd="curl $base_cmd"
    
    # Add HTTP method
    if [ -n "$method" ]; then
        cmd="$cmd -X $(printf %q "$method")"
    fi
    
    # Add authentication if provided
    if [ -n "$AUTH" ]; then
        cmd="$cmd --user $(printf %q "$AUTH")"
    fi
    
    # Add headers if provided
    for header in "${HEADERS[@]}"; do
        cmd="$cmd --header $(printf %q "$header")"
    done
    
    # Add cookies if provided
    for cookie in "${COOKIES[@]}"; do
        cmd="$cmd --cookie $(printf %q "$cookie")"
    done

    # Add max timeout option for all 
    if [ -n "$OVERRIDE_MAX_TIMEOUT" ]; then
        cmd="$cmd --max-time $(printf %q "$OVERRIDE_MAX_TIMEOUT")"
    fi

    # Replace original curl User Agent by a browser one
    if [ -n "$OVERRIDE_USER_AGENT" ]; then
        cmd="$cmd -A $(printf %q "$OVERRIDE_USER_AGENT")"
    fi
    
    # Add URL (using printf %q to properly escape special characters)
    cmd="$cmd $(printf %q "$url")"
    
    echo "$cmd"
}

# Function to process a single URL
process_url() {
    local URL="$1"
    local CSV_FILE="$2"
    local VERBOSITY="$3"
    local USE_COLOR="$4"
    local METHOD="$5"
    
    # Create a temporary file for headers
    temp_file=$(mktemp)
    
    # Single curl command to get all information we need
    local CURL_OPTS="-sIL -w '%{url_effective}\n%{http_code}\n' -o /dev/null -D $temp_file"
    local CURL_CMD=$(build_curl_command "$CURL_OPTS" "$URL" "$METHOD")
    
    # Execute command once and capture output
    output=$(eval "$CURL_CMD")
    effective_url=$(echo "$output" | head -1)
    final_status=$(echo "$output" | tail -1)

    # Process the headers to get all status codes and redirect URLs
    STATUS_CODES=()
    REDIRECT_URLS=()
    REDIRECT_URLS[0]="$URL"  # Start with the original URL
    
    current_status=""
    redirect_count=0
    
    while IFS= read -r line || [ -n "$line" ]; do
        # If line starts with HTTP, it's a status line
        if [[ "$line" =~ ^HTTP/ ]]; then
            current_status=$(echo "$line" | awk '{print $2}')
            STATUS_CODES[$redirect_count]="$current_status"
        # If line starts with Location, it's a redirect
        elif [[ "$line" =~ ^[Ll]ocation:\ (.*) ]]; then
            location="${BASH_REMATCH[1]}"
            # Remove carriage return if present
            location=$(echo "$location" | tr -d '\r')
            redirect_count=$((redirect_count + 1))
            REDIRECT_URLS[$redirect_count]="$location"
        fi
    done < "$temp_file"
    
    # Clean up temporary file
    rm "$temp_file"

    # Format status string with semicolons for both display and CSV
    status_string="["
    status_csv=""
    
    # Apply colors to status codes if enabled
    for i in $(seq 0 $((${#STATUS_CODES[@]} - 1))); do
        status_code="${STATUS_CODES[$i]}"
        status_csv+="${status_code}"
        
        # Add color to status code if colors are enabled
        if [ "$USE_COLOR" = "true" ]; then
            status_color=$(get_status_color "$status_code")
            status_string+="${status_color}${status_code}${RESET}"
        else
            status_string+="${status_code}"
        fi
        
        if [ $i -lt $(( ${#STATUS_CODES[@]} - 1 )) ]; then
            status_string+=";"
            status_csv+=";"
        fi
    done
    status_string+="]"

    # Display result based on verbosity
    if [ "$VERBOSITY" = "normal" ]; then
        if [ "$USE_COLOR" = "true" ]; then
            echo -e "$URL $status_string ${BLUE}$effective_url${RESET}"
        else
            echo "$URL $status_string $effective_url"
        fi
    elif [ "$VERBOSITY" = "verbose" ]; then
        echo -e "Original URL: $URL"
        echo -e "HTTP Method: $METHOD"
        echo -e "Status codes: $status_string"
        echo "Redirect chain:"
        
        # Display URLs with their corresponding status codes
        for i in $(seq 0 $((${#REDIRECT_URLS[@]} - 1))); do
            status_code="${STATUS_CODES[$i]}"
            url="${REDIRECT_URLS[$i]}"
            
            # For the last item, use the effective URL instead of the path 
            # if the last URL is just a path
            if [ $i -eq $(( ${#REDIRECT_URLS[@]} - 1 )) ]; then
                # If last URL is just a path, use effective URL
                if [[ "$url" == /* ]]; then
                    url="$effective_url"
                fi
            fi
            
            if [ "$USE_COLOR" = "true" ]; then
                status_color=$(get_status_color "$status_code")
                
                # Apply blue color to final URL
                if [ $i -eq $(( ${#REDIRECT_URLS[@]} - 1 )) ]; then
                    echo -e "  [${status_color}${status_code}${RESET}] ${BLUE}${url}${RESET}"
                else
                    echo -e "  [${status_color}${status_code}${RESET}] ${url}"
                fi
            else
                echo "  [${status_code}] ${url}"
            fi
        done
        echo "-------------------------------------"
    fi
    
    # Export to CSV if requested
    if [ -n "$CSV_FILE" ]; then
        # Properly escape CSV fields
        echo "\"$(echo "$URL" | sed 's/"/""/g')\",\"$status_csv\",\"$(echo "$effective_url" | sed 's/"/""/g')\"" >> "$CSV_FILE"
    fi
}

# Check if no arguments
if [ $# -eq 0 ]; then
    show_help
fi

# Initialize variables
LIST_FILE=""
CSV_FILE=""
SINGLE_URL=""
VERBOSITY="normal"  # Default verbosity
USE_COLOR="true"    # Default to using colors
AUTH=""             # Authentication credentials
HEADERS=()          # Array for custom headers
COOKIES=()          # Array for cookies
METHOD="$DEFAULT_METHOD"  # Default HTTP method

# Detect if we're on macOS
IS_MACOS=false
if [ "$(uname)" == "Darwin" ]; then
    IS_MACOS=true
fi

# Process arguments
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            show_help
            ;;
        -V|--version)
            show_version
            exit 0
            ;;
        -l|--list)
            if [ -z "$2" ] || [ ! -f "$2" ]; then
                echo "Error: List file not specified or not found."
                echo "Use '$0 --help' for more information."
                exit 1
            fi
            LIST_FILE="$2"
            shift 2
            ;;
        -o|--output)
            if [ -z "$2" ]; then
                echo "Error: Output file not specified."
                echo "Use '$0 --help' for more information."
                exit 1
            fi
            CSV_FILE="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSITY="verbose"
            shift
            ;;
        -q|--quiet)
            VERBOSITY="quiet"
            shift
            ;;
        -nc|--no-color)
            USE_COLOR="false"
            shift
            ;;
        -m|--method)
            if [ -z "$2" ]; then
                echo "Error: HTTP method not specified."
                echo "Use '$0 --help' for more information."
                exit 1
            fi
            METHOD="$2"
            shift 2
            ;;
        -a|--auth)
            if [ -z "$2" ]; then
                echo "Error: Authentication credentials not specified."
                echo "Use '$0 --help' for more information."
                exit 1
            fi
            AUTH="$2"
            shift 2
            ;;
        -H|--header)
            if [ -z "$2" ]; then
                echo "Error: Header not specified."
                echo "Use '$0 --help' for more information."
                exit 1
            fi
            HEADERS+=("$2")
            shift 2
            ;;
        -c|--cookie)
            if [ -z "$2" ]; then
                echo "Error: Cookie not specified."
                echo "Use '$0 --help' for more information."
                exit 1
            fi
            COOKIES+=("$2")
            shift 2
            ;;
        # Maintaining compatibility with old options
        -list)
            if [ -z "$2" ] || [ ! -f "$2" ]; then
                echo "Error: List file not specified or not found."
                echo "Use '$0 --help' for more information."
                exit 1
            fi
            LIST_FILE="$2"
            shift 2
            ;;
        -output)
            if [ -z "$2" ]; then
                echo "Error: Output file not specified."
                echo "Use '$0 --help' for more information."
                exit 1
            fi
            CSV_FILE="$2"
            shift 2
            ;;
        *)
            SINGLE_URL="$1"
            shift
            ;;
    esac
done

# Create CSV header if exporting to CSV
if [ -n "$CSV_FILE" ]; then
    echo "Origin,StatusCode,EffectiveUrl" > "$CSV_FILE"
fi

# Process URLs
if [ -n "$LIST_FILE" ]; then
    # Process each URL from the file
    while IFS= read -r url || [ -n "$url" ]; do
        # Trim spaces and skip empty lines or comments
        url=$(echo "$url" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        if [ -n "$url" ] && [[ ! "$url" =~ ^[[:space:]]*# ]]; then
            if [ "$VERBOSITY" != "quiet" ]; then
                process_url "$url" "$CSV_FILE" "$VERBOSITY" "$USE_COLOR" "$METHOD"
            else
                process_url "$url" "$CSV_FILE" "$VERBOSITY" "false" "$METHOD" > /dev/null
            fi
        fi
    done < "$LIST_FILE"
elif [ -n "$SINGLE_URL" ]; then
    # Process a single URL
    if [ "$VERBOSITY" != "quiet" ]; then
        process_url "$SINGLE_URL" "$CSV_FILE" "$VERBOSITY" "$USE_COLOR" "$METHOD"
    else
        process_url "$SINGLE_URL" "$CSV_FILE" "$VERBOSITY" "false" "$METHOD" > /dev/null
    fi
else
    show_help
fi